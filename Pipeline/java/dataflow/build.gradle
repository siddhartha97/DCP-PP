apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'java-library-distribution'
apply plugin: 'com.google.protobuf'

sourceCompatibility = '1.8'
mainClassName = 'edu.usfca.dataflow.Main'
version = 's20.labs'

repositories {
    mavenCentral()
}

ext {
    beamVersion = '2.16.0'
    gcVersion = '1.75.0'
    slf4jVersion = '1.7.14'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
    }
}

dependencies {
    // apache
    compile group: 'org.apache.beam', name: 'beam-runners-google-cloud-dataflow-java', version: "${beamVersion}"
    compile group: 'org.apache.beam', name: 'beam-runners-core-construction-java', version: "${beamVersion}"
    compile group: 'org.apache.beam', name: 'beam-sdks-java-io-google-cloud-platform', version: "${beamVersion}"
    compile group: 'org.apache.beam', name: 'beam-runners-direct-java', version: "${beamVersion}"
    compile group: 'org.apache.beam', name: 'beam-sdks-java-io-xml', version: "${beamVersion}"
    
    // google
    compile 'com.google.guava:guava:28.1-jre'
    compile group: 'com.google.cloud', name: 'google-cloud-bigquery', version: "${gcVersion}"
    compile group: 'com.google.cloud', name: 'google-cloud-storage', version: "${gcVersion}"

    // annotation
    compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "${slf4jVersion}"

    // test
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest:2.1'
}

sourceSets {
    main {
        proto {
            srcDir "src/proto"
        }
        java {
            srcDirs "src/main/java", "$projectDir/src/generated-sources"
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.2'
    }
    generatedFilesBaseDir = "$projectDir/src/generated-sources"
    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
            task.builtins {
                java
            }
        }
        ofSourceSet('main')
    }
    clean {
        delete generatedFilesBaseDir
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

clean {
    delete "$projectDir/src/generated-sources"
}